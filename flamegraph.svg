<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="853.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="853.00"> </text><svg id="frames" x="10" width="1180" total_samples="1608"><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0000%" y="789" width="0.0622%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="799.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.06%)</title><rect x="0.0000%" y="773" width="0.0622%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="783.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (1 samples, 0.06%)</title><rect x="0.0000%" y="757" width="0.0622%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="767.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (1 samples, 0.06%)</title><rect x="0.0000%" y="741" width="0.0622%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="751.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.06%)</title><rect x="0.0000%" y="725" width="0.0622%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>__libc_write (1 samples, 0.06%)</title><rect x="0.0000%" y="709" width="0.0622%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0000%" y="693" width="0.0622%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0622%" y="773" width="0.0622%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.3122%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0622%" y="757" width="0.0622%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.3122%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0622%" y="741" width="0.0622%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.3122%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0622%" y="725" width="0.0622%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.3122%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0622%" y="709" width="0.0622%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.3122%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0622%" y="693" width="0.0622%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.3122%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0622%" y="677" width="0.0622%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.3122%" y="687.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.06%)</title><rect x="0.4353%" y="485" width="0.0622%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="1"/><text x="0.6853%" y="495.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (2 samples, 0.12%)</title><rect x="0.4975%" y="485" width="0.1244%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="2"/><text x="0.7475%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (2 samples, 0.12%)</title><rect x="0.4975%" y="469" width="0.1244%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="2"/><text x="0.7475%" y="479.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (2 samples, 0.12%)</title><rect x="0.4975%" y="453" width="0.1244%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="2"/><text x="0.7475%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.12%)</title><rect x="0.4975%" y="437" width="0.1244%" height="15" fill="rgb(221,200,47)" fg:x="8" fg:w="2"/><text x="0.7475%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.12%)</title><rect x="0.4975%" y="421" width="0.1244%" height="15" fill="rgb(226,26,5)" fg:x="8" fg:w="2"/><text x="0.7475%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.12%)</title><rect x="0.4975%" y="405" width="0.1244%" height="15" fill="rgb(249,33,26)" fg:x="8" fg:w="2"/><text x="0.7475%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.12%)</title><rect x="1.6169%" y="357" width="0.1244%" height="15" fill="rgb(235,183,28)" fg:x="26" fg:w="2"/><text x="1.8669%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.06%)</title><rect x="1.7413%" y="357" width="0.0622%" height="15" fill="rgb(221,5,38)" fg:x="28" fg:w="1"/><text x="1.9913%" y="367.50"></text></g><g><title>__memcpy_avx_unaligned (4 samples, 0.25%)</title><rect x="1.8035%" y="341" width="0.2488%" height="15" fill="rgb(247,18,42)" fg:x="29" fg:w="4"/><text x="2.0535%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (16 samples, 1.00%)</title><rect x="1.1194%" y="453" width="0.9950%" height="15" fill="rgb(241,131,45)" fg:x="18" fg:w="16"/><text x="1.3694%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (11 samples, 0.68%)</title><rect x="1.4303%" y="437" width="0.6841%" height="15" fill="rgb(249,31,29)" fg:x="23" fg:w="11"/><text x="1.6803%" y="447.50"></text></g><g><title>alloc::string::String::push_str (11 samples, 0.68%)</title><rect x="1.4303%" y="421" width="0.6841%" height="15" fill="rgb(225,111,53)" fg:x="23" fg:w="11"/><text x="1.6803%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (11 samples, 0.68%)</title><rect x="1.4303%" y="405" width="0.6841%" height="15" fill="rgb(238,160,17)" fg:x="23" fg:w="11"/><text x="1.6803%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (11 samples, 0.68%)</title><rect x="1.4303%" y="389" width="0.6841%" height="15" fill="rgb(214,148,48)" fg:x="23" fg:w="11"/><text x="1.6803%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (11 samples, 0.68%)</title><rect x="1.4303%" y="373" width="0.6841%" height="15" fill="rgb(232,36,49)" fg:x="23" fg:w="11"/><text x="1.6803%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.31%)</title><rect x="1.8035%" y="357" width="0.3109%" height="15" fill="rgb(209,103,24)" fg:x="29" fg:w="5"/><text x="2.0535%" y="367.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="2.0522%" y="341" width="0.0622%" height="15" fill="rgb(229,88,8)" fg:x="33" fg:w="1"/><text x="2.3022%" y="351.50"></text></g><g><title>[libc-2.33.so] (1 samples, 0.06%)</title><rect x="3.7935%" y="181" width="0.0622%" height="15" fill="rgb(213,181,19)" fg:x="61" fg:w="1"/><text x="4.0435%" y="191.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.06%)</title><rect x="3.8557%" y="181" width="0.0622%" height="15" fill="rgb(254,191,54)" fg:x="62" fg:w="1"/><text x="4.1057%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.19%)</title><rect x="3.9179%" y="181" width="0.1866%" height="15" fill="rgb(241,83,37)" fg:x="63" fg:w="3"/><text x="4.1679%" y="191.50"></text></g><g><title>_int_free (3 samples, 0.19%)</title><rect x="4.1045%" y="181" width="0.1866%" height="15" fill="rgb(233,36,39)" fg:x="66" fg:w="3"/><text x="4.3545%" y="191.50"></text></g><g><title>__GI___libc_realloc (23 samples, 1.43%)</title><rect x="3.2960%" y="213" width="1.4303%" height="15" fill="rgb(226,3,54)" fg:x="53" fg:w="23"/><text x="3.5460%" y="223.50"></text></g><g><title>_int_realloc (18 samples, 1.12%)</title><rect x="3.6070%" y="197" width="1.1194%" height="15" fill="rgb(245,192,40)" fg:x="58" fg:w="18"/><text x="3.8570%" y="207.50"></text></g><g><title>_int_malloc (7 samples, 0.44%)</title><rect x="4.2910%" y="181" width="0.4353%" height="15" fill="rgb(238,167,29)" fg:x="69" fg:w="7"/><text x="4.5410%" y="191.50"></text></g><g><title>__rdl_realloc (3 samples, 0.19%)</title><rect x="4.7264%" y="213" width="0.1866%" height="15" fill="rgb(232,182,51)" fg:x="76" fg:w="3"/><text x="4.9764%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.19%)</title><rect x="4.7264%" y="197" width="0.1866%" height="15" fill="rgb(231,60,39)" fg:x="76" fg:w="3"/><text x="4.9764%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (38 samples, 2.36%)</title><rect x="2.6741%" y="341" width="2.3632%" height="15" fill="rgb(208,69,12)" fg:x="43" fg:w="38"/><text x="2.9241%" y="351.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (36 samples, 2.24%)</title><rect x="2.7985%" y="325" width="2.2388%" height="15" fill="rgb(235,93,37)" fg:x="45" fg:w="36"/><text x="3.0485%" y="335.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (36 samples, 2.24%)</title><rect x="2.7985%" y="309" width="2.2388%" height="15" fill="rgb(213,116,39)" fg:x="45" fg:w="36"/><text x="3.0485%" y="319.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (36 samples, 2.24%)</title><rect x="2.7985%" y="293" width="2.2388%" height="15" fill="rgb(222,207,29)" fg:x="45" fg:w="36"/><text x="3.0485%" y="303.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (36 samples, 2.24%)</title><rect x="2.7985%" y="277" width="2.2388%" height="15" fill="rgb(206,96,30)" fg:x="45" fg:w="36"/><text x="3.0485%" y="287.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (28 samples, 1.74%)</title><rect x="3.2960%" y="261" width="1.7413%" height="15" fill="rgb(218,138,4)" fg:x="53" fg:w="28"/><text x="3.5460%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (28 samples, 1.74%)</title><rect x="3.2960%" y="245" width="1.7413%" height="15" fill="rgb(250,191,14)" fg:x="53" fg:w="28"/><text x="3.5460%" y="255.50"></text></g><g><title>alloc::alloc::realloc (28 samples, 1.74%)</title><rect x="3.2960%" y="229" width="1.7413%" height="15" fill="rgb(239,60,40)" fg:x="53" fg:w="28"/><text x="3.5460%" y="239.50"></text></g><g><title>__rust_realloc (2 samples, 0.12%)</title><rect x="4.9129%" y="213" width="0.1244%" height="15" fill="rgb(206,27,48)" fg:x="79" fg:w="2"/><text x="5.1629%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.68%)</title><rect x="5.0373%" y="341" width="0.6841%" height="15" fill="rgb(225,35,8)" fg:x="81" fg:w="11"/><text x="5.2873%" y="351.50"></text></g><g><title>__memcpy_avx_unaligned (11 samples, 0.68%)</title><rect x="5.0373%" y="325" width="0.6841%" height="15" fill="rgb(250,213,24)" fg:x="81" fg:w="11"/><text x="5.2873%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (51 samples, 3.17%)</title><rect x="2.6119%" y="437" width="3.1716%" height="15" fill="rgb(247,123,22)" fg:x="42" fg:w="51"/><text x="2.8619%" y="447.50">&lt;&amp;m..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (50 samples, 3.11%)</title><rect x="2.6741%" y="421" width="3.1095%" height="15" fill="rgb(231,138,38)" fg:x="43" fg:w="50"/><text x="2.9241%" y="431.50">&lt;al..</text></g><g><title>alloc::string::String::push_str (50 samples, 3.11%)</title><rect x="2.6741%" y="405" width="3.1095%" height="15" fill="rgb(231,145,46)" fg:x="43" fg:w="50"/><text x="2.9241%" y="415.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (50 samples, 3.11%)</title><rect x="2.6741%" y="389" width="3.1095%" height="15" fill="rgb(251,118,11)" fg:x="43" fg:w="50"/><text x="2.9241%" y="399.50">all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (50 samples, 3.11%)</title><rect x="2.6741%" y="373" width="3.1095%" height="15" fill="rgb(217,147,25)" fg:x="43" fg:w="50"/><text x="2.9241%" y="383.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (50 samples, 3.11%)</title><rect x="2.6741%" y="357" width="3.1095%" height="15" fill="rgb(247,81,37)" fg:x="43" fg:w="50"/><text x="2.9241%" y="367.50">all..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.06%)</title><rect x="5.7214%" y="341" width="0.0622%" height="15" fill="rgb(209,12,38)" fg:x="92" fg:w="1"/><text x="5.9714%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.06%)</title><rect x="5.7214%" y="325" width="0.0622%" height="15" fill="rgb(227,1,9)" fg:x="92" fg:w="1"/><text x="5.9714%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (3 samples, 0.19%)</title><rect x="5.7836%" y="437" width="0.1866%" height="15" fill="rgb(248,47,43)" fg:x="93" fg:w="3"/><text x="6.0336%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (1 samples, 0.06%)</title><rect x="5.9080%" y="421" width="0.0622%" height="15" fill="rgb(221,10,30)" fg:x="95" fg:w="1"/><text x="6.1580%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.06%)</title><rect x="5.9080%" y="405" width="0.0622%" height="15" fill="rgb(210,229,1)" fg:x="95" fg:w="1"/><text x="6.1580%" y="415.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (2 samples, 0.12%)</title><rect x="5.9701%" y="437" width="0.1244%" height="15" fill="rgb(222,148,37)" fg:x="96" fg:w="2"/><text x="6.2201%" y="447.50"></text></g><g><title>core::fmt::Formatter::pad (2 samples, 0.12%)</title><rect x="6.0945%" y="437" width="0.1244%" height="15" fill="rgb(234,67,33)" fg:x="98" fg:w="2"/><text x="6.3445%" y="447.50"></text></g><g><title>core::fmt::getcount (1 samples, 0.06%)</title><rect x="6.2189%" y="437" width="0.0622%" height="15" fill="rgb(247,98,35)" fg:x="100" fg:w="1"/><text x="6.4689%" y="447.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1 samples, 0.06%)</title><rect x="6.6542%" y="245" width="0.0622%" height="15" fill="rgb(247,138,52)" fg:x="107" fg:w="1"/><text x="6.9042%" y="255.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.19%)</title><rect x="6.9030%" y="229" width="0.1866%" height="15" fill="rgb(213,79,30)" fg:x="111" fg:w="3"/><text x="7.1530%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.06%)</title><rect x="7.0896%" y="229" width="0.0622%" height="15" fill="rgb(246,177,23)" fg:x="114" fg:w="1"/><text x="7.3396%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.06%)</title><rect x="7.0896%" y="213" width="0.0622%" height="15" fill="rgb(230,62,27)" fg:x="114" fg:w="1"/><text x="7.3396%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (9 samples, 0.56%)</title><rect x="6.6542%" y="309" width="0.5597%" height="15" fill="rgb(216,154,8)" fg:x="107" fg:w="9"/><text x="6.9042%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.56%)</title><rect x="6.6542%" y="293" width="0.5597%" height="15" fill="rgb(244,35,45)" fg:x="107" fg:w="9"/><text x="6.9042%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (9 samples, 0.56%)</title><rect x="6.6542%" y="277" width="0.5597%" height="15" fill="rgb(251,115,12)" fg:x="107" fg:w="9"/><text x="6.9042%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.56%)</title><rect x="6.6542%" y="261" width="0.5597%" height="15" fill="rgb(240,54,50)" fg:x="107" fg:w="9"/><text x="6.9042%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.50%)</title><rect x="6.7164%" y="245" width="0.4975%" height="15" fill="rgb(233,84,52)" fg:x="108" fg:w="8"/><text x="6.9664%" y="255.50"></text></g><g><title>__rust_alloc (1 samples, 0.06%)</title><rect x="7.1517%" y="229" width="0.0622%" height="15" fill="rgb(207,117,47)" fg:x="115" fg:w="1"/><text x="7.4017%" y="239.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (12 samples, 0.75%)</title><rect x="6.5299%" y="405" width="0.7463%" height="15" fill="rgb(249,43,39)" fg:x="105" fg:w="12"/><text x="6.7799%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (11 samples, 0.68%)</title><rect x="6.5920%" y="389" width="0.6841%" height="15" fill="rgb(209,38,44)" fg:x="106" fg:w="11"/><text x="6.8420%" y="399.50"></text></g><g><title>alloc::string::String::push_str (11 samples, 0.68%)</title><rect x="6.5920%" y="373" width="0.6841%" height="15" fill="rgb(236,212,23)" fg:x="106" fg:w="11"/><text x="6.8420%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (11 samples, 0.68%)</title><rect x="6.5920%" y="357" width="0.6841%" height="15" fill="rgb(242,79,21)" fg:x="106" fg:w="11"/><text x="6.8420%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (11 samples, 0.68%)</title><rect x="6.5920%" y="341" width="0.6841%" height="15" fill="rgb(211,96,35)" fg:x="106" fg:w="11"/><text x="6.8420%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (11 samples, 0.68%)</title><rect x="6.5920%" y="325" width="0.6841%" height="15" fill="rgb(253,215,40)" fg:x="106" fg:w="11"/><text x="6.8420%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="7.2139%" y="309" width="0.0622%" height="15" fill="rgb(211,81,21)" fg:x="116" fg:w="1"/><text x="7.4639%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="7.2139%" y="293" width="0.0622%" height="15" fill="rgb(208,190,38)" fg:x="116" fg:w="1"/><text x="7.4639%" y="303.50"></text></g><g><title>&lt;core::fmt::num::UpperHex as core::fmt::num::GenericRadix&gt;::digit (3 samples, 0.19%)</title><rect x="7.2761%" y="405" width="0.1866%" height="15" fill="rgb(235,213,38)" fg:x="117" fg:w="3"/><text x="7.5261%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.12%)</title><rect x="7.4627%" y="405" width="0.1244%" height="15" fill="rgb(237,122,38)" fg:x="120" fg:w="2"/><text x="7.7127%" y="415.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (2 samples, 0.12%)</title><rect x="7.4627%" y="389" width="0.1244%" height="15" fill="rgb(244,218,35)" fg:x="120" fg:w="2"/><text x="7.7127%" y="399.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::pre_dec_end (2 samples, 0.12%)</title><rect x="7.4627%" y="373" width="0.1244%" height="15" fill="rgb(240,68,47)" fg:x="120" fg:w="2"/><text x="7.7127%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.12%)</title><rect x="7.4627%" y="357" width="0.1244%" height="15" fill="rgb(210,16,53)" fg:x="120" fg:w="2"/><text x="7.7127%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 0.19%)</title><rect x="7.5871%" y="389" width="0.1866%" height="15" fill="rgb(235,124,12)" fg:x="122" fg:w="3"/><text x="7.8371%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="7.7114%" y="373" width="0.0622%" height="15" fill="rgb(224,169,11)" fg:x="124" fg:w="1"/><text x="7.9614%" y="383.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.06%)</title><rect x="7.7114%" y="357" width="0.0622%" height="15" fill="rgb(250,166,2)" fg:x="124" fg:w="1"/><text x="7.9614%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.06%)</title><rect x="7.7114%" y="341" width="0.0622%" height="15" fill="rgb(242,216,29)" fg:x="124" fg:w="1"/><text x="7.9614%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="7.7114%" y="325" width="0.0622%" height="15" fill="rgb(230,116,27)" fg:x="124" fg:w="1"/><text x="7.9614%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.06%)</title><rect x="7.7114%" y="309" width="0.0622%" height="15" fill="rgb(228,99,48)" fg:x="124" fg:w="1"/><text x="7.9614%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.06%)</title><rect x="7.7114%" y="293" width="0.0622%" height="15" fill="rgb(253,11,6)" fg:x="124" fg:w="1"/><text x="7.9614%" y="303.50"></text></g><g><title>alloc::fmt::format (124 samples, 7.71%)</title><rect x="0.3731%" y="501" width="7.7114%" height="15" fill="rgb(247,143,39)" fg:x="6" fg:w="124"/><text x="0.6231%" y="511.50">alloc::fmt:..</text></g><g><title>core::fmt::Write::write_fmt (120 samples, 7.46%)</title><rect x="0.6219%" y="485" width="7.4627%" height="15" fill="rgb(236,97,10)" fg:x="10" fg:w="120"/><text x="0.8719%" y="495.50">core::fmt:..</text></g><g><title>core::fmt::write (117 samples, 7.28%)</title><rect x="0.8085%" y="469" width="7.2761%" height="15" fill="rgb(233,208,19)" fg:x="13" fg:w="117"/><text x="1.0585%" y="479.50">core::fmt:..</text></g><g><title>core::fmt::run (96 samples, 5.97%)</title><rect x="2.1144%" y="453" width="5.9701%" height="15" fill="rgb(216,164,2)" fg:x="34" fg:w="96"/><text x="2.3644%" y="463.50">core::fm..</text></g><g><title>core::fmt::num::&lt;impl core::fmt::UpperHex for i64&gt;::fmt (29 samples, 1.80%)</title><rect x="6.2811%" y="437" width="1.8035%" height="15" fill="rgb(220,129,5)" fg:x="101" fg:w="29"/><text x="6.5311%" y="447.50">c..</text></g><g><title>core::fmt::num::GenericRadix::fmt_int (25 samples, 1.55%)</title><rect x="6.5299%" y="421" width="1.5547%" height="15" fill="rgb(242,17,10)" fg:x="105" fg:w="25"/><text x="6.7799%" y="431.50"></text></g><g><title>core::fmt::Formatter::pad_integral (8 samples, 0.50%)</title><rect x="7.5871%" y="405" width="0.4975%" height="15" fill="rgb(242,107,0)" fg:x="122" fg:w="8"/><text x="7.8371%" y="415.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (5 samples, 0.31%)</title><rect x="7.7736%" y="389" width="0.3109%" height="15" fill="rgb(251,28,31)" fg:x="125" fg:w="5"/><text x="8.0236%" y="399.50"></text></g><g><title>core::fmt::Arguments::new_v1_formatted (3 samples, 0.19%)</title><rect x="8.0846%" y="501" width="0.1866%" height="15" fill="rgb(233,223,10)" fg:x="130" fg:w="3"/><text x="8.3346%" y="511.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.12%)</title><rect x="8.5821%" y="357" width="0.1244%" height="15" fill="rgb(215,21,27)" fg:x="138" fg:w="2"/><text x="8.8321%" y="367.50"></text></g><g><title>alloc::string::String::with_capacity (3 samples, 0.19%)</title><rect x="8.5821%" y="485" width="0.1866%" height="15" fill="rgb(232,23,21)" fg:x="138" fg:w="3"/><text x="8.8321%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.19%)</title><rect x="8.5821%" y="469" width="0.1866%" height="15" fill="rgb(244,5,23)" fg:x="138" fg:w="3"/><text x="8.8321%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.19%)</title><rect x="8.5821%" y="453" width="0.1866%" height="15" fill="rgb(226,81,46)" fg:x="138" fg:w="3"/><text x="8.8321%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.19%)</title><rect x="8.5821%" y="437" width="0.1866%" height="15" fill="rgb(247,70,30)" fg:x="138" fg:w="3"/><text x="8.8321%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.19%)</title><rect x="8.5821%" y="421" width="0.1866%" height="15" fill="rgb(212,68,19)" fg:x="138" fg:w="3"/><text x="8.8321%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.19%)</title><rect x="8.5821%" y="405" width="0.1866%" height="15" fill="rgb(240,187,13)" fg:x="138" fg:w="3"/><text x="8.8321%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.19%)</title><rect x="8.5821%" y="389" width="0.1866%" height="15" fill="rgb(223,113,26)" fg:x="138" fg:w="3"/><text x="8.8321%" y="399.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.19%)</title><rect x="8.5821%" y="373" width="0.1866%" height="15" fill="rgb(206,192,2)" fg:x="138" fg:w="3"/><text x="8.8321%" y="383.50"></text></g><g><title>__rdl_alloc (1 samples, 0.06%)</title><rect x="8.7065%" y="357" width="0.0622%" height="15" fill="rgb(241,108,4)" fg:x="140" fg:w="1"/><text x="8.9565%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (11 samples, 0.68%)</title><rect x="9.2040%" y="373" width="0.6841%" height="15" fill="rgb(247,173,49)" fg:x="148" fg:w="11"/><text x="9.4540%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.37%)</title><rect x="9.5149%" y="357" width="0.3731%" height="15" fill="rgb(224,114,35)" fg:x="153" fg:w="6"/><text x="9.7649%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (2 samples, 0.12%)</title><rect x="9.7637%" y="341" width="0.1244%" height="15" fill="rgb(245,159,27)" fg:x="157" fg:w="2"/><text x="10.0137%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.50%)</title><rect x="9.8881%" y="373" width="0.4975%" height="15" fill="rgb(245,172,44)" fg:x="159" fg:w="8"/><text x="10.1381%" y="383.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.25%)</title><rect x="10.1368%" y="357" width="0.2488%" height="15" fill="rgb(236,23,11)" fg:x="163" fg:w="4"/><text x="10.3868%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::ops::arith::Add&lt;&amp;str&gt;&gt;::add (24 samples, 1.49%)</title><rect x="9.0174%" y="453" width="1.4925%" height="15" fill="rgb(205,117,38)" fg:x="145" fg:w="24"/><text x="9.2674%" y="463.50"></text></g><g><title>alloc::string::String::push_str (21 samples, 1.31%)</title><rect x="9.2040%" y="437" width="1.3060%" height="15" fill="rgb(237,72,25)" fg:x="148" fg:w="21"/><text x="9.4540%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (21 samples, 1.31%)</title><rect x="9.2040%" y="421" width="1.3060%" height="15" fill="rgb(244,70,9)" fg:x="148" fg:w="21"/><text x="9.4540%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (21 samples, 1.31%)</title><rect x="9.2040%" y="405" width="1.3060%" height="15" fill="rgb(217,125,39)" fg:x="148" fg:w="21"/><text x="9.4540%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (21 samples, 1.31%)</title><rect x="9.2040%" y="389" width="1.3060%" height="15" fill="rgb(235,36,10)" fg:x="148" fg:w="21"/><text x="9.4540%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.12%)</title><rect x="10.3856%" y="373" width="0.1244%" height="15" fill="rgb(251,123,47)" fg:x="167" fg:w="2"/><text x="10.6356%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.12%)</title><rect x="10.3856%" y="357" width="0.1244%" height="15" fill="rgb(221,13,13)" fg:x="167" fg:w="2"/><text x="10.6356%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (6 samples, 0.37%)</title><rect x="10.5100%" y="453" width="0.3731%" height="15" fill="rgb(238,131,9)" fg:x="169" fg:w="6"/><text x="10.7600%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.37%)</title><rect x="10.5100%" y="437" width="0.3731%" height="15" fill="rgb(211,50,8)" fg:x="169" fg:w="6"/><text x="10.7600%" y="447.50"></text></g><g><title>__GI___libc_free (16 samples, 1.00%)</title><rect x="10.8831%" y="357" width="0.9950%" height="15" fill="rgb(245,182,24)" fg:x="175" fg:w="16"/><text x="11.1331%" y="367.50"></text></g><g><title>_int_free (10 samples, 0.62%)</title><rect x="11.2562%" y="341" width="0.6219%" height="15" fill="rgb(242,14,37)" fg:x="181" fg:w="10"/><text x="11.5062%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (21 samples, 1.31%)</title><rect x="10.8831%" y="453" width="1.3060%" height="15" fill="rgb(246,228,12)" fg:x="175" fg:w="21"/><text x="11.1331%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (21 samples, 1.31%)</title><rect x="10.8831%" y="437" width="1.3060%" height="15" fill="rgb(213,55,15)" fg:x="175" fg:w="21"/><text x="11.1331%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (21 samples, 1.31%)</title><rect x="10.8831%" y="421" width="1.3060%" height="15" fill="rgb(209,9,3)" fg:x="175" fg:w="21"/><text x="11.1331%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 1.31%)</title><rect x="10.8831%" y="405" width="1.3060%" height="15" fill="rgb(230,59,30)" fg:x="175" fg:w="21"/><text x="11.1331%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21 samples, 1.31%)</title><rect x="10.8831%" y="389" width="1.3060%" height="15" fill="rgb(209,121,21)" fg:x="175" fg:w="21"/><text x="11.1331%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (21 samples, 1.31%)</title><rect x="10.8831%" y="373" width="1.3060%" height="15" fill="rgb(220,109,13)" fg:x="175" fg:w="21"/><text x="11.1331%" y="383.50"></text></g><g><title>__rust_dealloc (5 samples, 0.31%)</title><rect x="11.8781%" y="357" width="0.3109%" height="15" fill="rgb(232,18,1)" fg:x="191" fg:w="5"/><text x="12.1281%" y="367.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.31%)</title><rect x="12.1891%" y="309" width="0.3109%" height="15" fill="rgb(215,41,42)" fg:x="196" fg:w="5"/><text x="12.4391%" y="319.50"></text></g><g><title>__rdl_alloc (3 samples, 0.19%)</title><rect x="12.5000%" y="309" width="0.1866%" height="15" fill="rgb(224,123,36)" fg:x="201" fg:w="3"/><text x="12.7500%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.06%)</title><rect x="12.6244%" y="293" width="0.0622%" height="15" fill="rgb(240,125,3)" fg:x="203" fg:w="1"/><text x="12.8744%" y="303.50"></text></g><g><title>alloc::string::String::with_capacity (11 samples, 0.68%)</title><rect x="12.1891%" y="437" width="0.6841%" height="15" fill="rgb(205,98,50)" fg:x="196" fg:w="11"/><text x="12.4391%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (11 samples, 0.68%)</title><rect x="12.1891%" y="421" width="0.6841%" height="15" fill="rgb(205,185,37)" fg:x="196" fg:w="11"/><text x="12.4391%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.68%)</title><rect x="12.1891%" y="405" width="0.6841%" height="15" fill="rgb(238,207,15)" fg:x="196" fg:w="11"/><text x="12.4391%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.68%)</title><rect x="12.1891%" y="389" width="0.6841%" height="15" fill="rgb(213,199,42)" fg:x="196" fg:w="11"/><text x="12.4391%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11 samples, 0.68%)</title><rect x="12.1891%" y="373" width="0.6841%" height="15" fill="rgb(235,201,11)" fg:x="196" fg:w="11"/><text x="12.4391%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.68%)</title><rect x="12.1891%" y="357" width="0.6841%" height="15" fill="rgb(207,46,11)" fg:x="196" fg:w="11"/><text x="12.4391%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.68%)</title><rect x="12.1891%" y="341" width="0.6841%" height="15" fill="rgb(241,35,35)" fg:x="196" fg:w="11"/><text x="12.4391%" y="351.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.68%)</title><rect x="12.1891%" y="325" width="0.6841%" height="15" fill="rgb(243,32,47)" fg:x="196" fg:w="11"/><text x="12.4391%" y="335.50"></text></g><g><title>__rust_alloc (3 samples, 0.19%)</title><rect x="12.6866%" y="309" width="0.1866%" height="15" fill="rgb(247,202,23)" fg:x="204" fg:w="3"/><text x="12.9366%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (37 samples, 2.30%)</title><rect x="15.6095%" y="325" width="2.3010%" height="15" fill="rgb(219,102,11)" fg:x="251" fg:w="37"/><text x="15.8595%" y="335.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (33 samples, 2.05%)</title><rect x="15.8582%" y="309" width="2.0522%" height="15" fill="rgb(243,110,44)" fg:x="255" fg:w="33"/><text x="16.1082%" y="319.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (16 samples, 1.00%)</title><rect x="16.9154%" y="293" width="0.9950%" height="15" fill="rgb(222,74,54)" fg:x="272" fg:w="16"/><text x="17.1654%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (14 samples, 0.87%)</title><rect x="17.0398%" y="277" width="0.8706%" height="15" fill="rgb(216,99,12)" fg:x="274" fg:w="14"/><text x="17.2898%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (14 samples, 0.87%)</title><rect x="17.0398%" y="261" width="0.8706%" height="15" fill="rgb(226,22,26)" fg:x="274" fg:w="14"/><text x="17.2898%" y="271.50"></text></g><g><title>__memcpy_avx_unaligned (3 samples, 0.19%)</title><rect x="17.9726%" y="309" width="0.1866%" height="15" fill="rgb(217,163,10)" fg:x="289" fg:w="3"/><text x="18.2226%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 1.00%)</title><rect x="17.9104%" y="325" width="0.9950%" height="15" fill="rgb(213,25,53)" fg:x="288" fg:w="16"/><text x="18.1604%" y="335.50"></text></g><g><title>__memmove_avx_unaligned_erms (12 samples, 0.75%)</title><rect x="18.1592%" y="309" width="0.7463%" height="15" fill="rgb(252,105,26)" fg:x="292" fg:w="12"/><text x="18.4092%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::ops::arith::Add&lt;&amp;str&gt;&gt;::add (76 samples, 4.73%)</title><rect x="14.3035%" y="405" width="4.7264%" height="15" fill="rgb(220,39,43)" fg:x="230" fg:w="76"/><text x="14.5535%" y="415.50">&lt;alloc..</text></g><g><title>alloc::string::String::push_str (69 samples, 4.29%)</title><rect x="14.7388%" y="389" width="4.2910%" height="15" fill="rgb(229,68,48)" fg:x="237" fg:w="69"/><text x="14.9888%" y="399.50">alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (69 samples, 4.29%)</title><rect x="14.7388%" y="373" width="4.2910%" height="15" fill="rgb(252,8,32)" fg:x="237" fg:w="69"/><text x="14.9888%" y="383.50">alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (69 samples, 4.29%)</title><rect x="14.7388%" y="357" width="4.2910%" height="15" fill="rgb(223,20,43)" fg:x="237" fg:w="69"/><text x="14.9888%" y="367.50">&lt;allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (69 samples, 4.29%)</title><rect x="14.7388%" y="341" width="4.2910%" height="15" fill="rgb(229,81,49)" fg:x="237" fg:w="69"/><text x="14.9888%" y="351.50">alloc..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.12%)</title><rect x="18.9055%" y="325" width="0.1244%" height="15" fill="rgb(236,28,36)" fg:x="304" fg:w="2"/><text x="19.1555%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.12%)</title><rect x="18.9055%" y="309" width="0.1244%" height="15" fill="rgb(249,185,26)" fg:x="304" fg:w="2"/><text x="19.1555%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (18 samples, 1.12%)</title><rect x="19.0299%" y="405" width="1.1194%" height="15" fill="rgb(249,174,33)" fg:x="306" fg:w="18"/><text x="19.2799%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (18 samples, 1.12%)</title><rect x="19.0299%" y="389" width="1.1194%" height="15" fill="rgb(233,201,37)" fg:x="306" fg:w="18"/><text x="19.2799%" y="399.50"></text></g><g><title>__GI___libc_free (63 samples, 3.92%)</title><rect x="20.2736%" y="309" width="3.9179%" height="15" fill="rgb(221,78,26)" fg:x="326" fg:w="63"/><text x="20.5236%" y="319.50">__GI..</text></g><g><title>_int_free (46 samples, 2.86%)</title><rect x="21.3308%" y="293" width="2.8607%" height="15" fill="rgb(250,127,30)" fg:x="343" fg:w="46"/><text x="21.5808%" y="303.50">_i..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (76 samples, 4.73%)</title><rect x="20.1493%" y="341" width="4.7264%" height="15" fill="rgb(230,49,44)" fg:x="324" fg:w="76"/><text x="20.3993%" y="351.50">&lt;alloc..</text></g><g><title>alloc::alloc::dealloc (76 samples, 4.73%)</title><rect x="20.1493%" y="325" width="4.7264%" height="15" fill="rgb(229,67,23)" fg:x="324" fg:w="76"/><text x="20.3993%" y="335.50">alloc:..</text></g><g><title>__rust_dealloc (11 samples, 0.68%)</title><rect x="24.1915%" y="309" width="0.6841%" height="15" fill="rgb(249,83,47)" fg:x="389" fg:w="11"/><text x="24.4415%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (78 samples, 4.85%)</title><rect x="20.1493%" y="405" width="4.8507%" height="15" fill="rgb(215,43,3)" fg:x="324" fg:w="78"/><text x="20.3993%" y="415.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (78 samples, 4.85%)</title><rect x="20.1493%" y="389" width="4.8507%" height="15" fill="rgb(238,154,13)" fg:x="324" fg:w="78"/><text x="20.3993%" y="399.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (78 samples, 4.85%)</title><rect x="20.1493%" y="373" width="4.8507%" height="15" fill="rgb(219,56,2)" fg:x="324" fg:w="78"/><text x="20.3993%" y="383.50">core::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (78 samples, 4.85%)</title><rect x="20.1493%" y="357" width="4.8507%" height="15" fill="rgb(233,0,4)" fg:x="324" fg:w="78"/><text x="20.3993%" y="367.50">&lt;alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.12%)</title><rect x="24.8756%" y="341" width="0.1244%" height="15" fill="rgb(235,30,7)" fg:x="400" fg:w="2"/><text x="25.1256%" y="351.50"></text></g><g><title>__GI___libc_malloc (25 samples, 1.55%)</title><rect x="25.1866%" y="261" width="1.5547%" height="15" fill="rgb(250,79,13)" fg:x="405" fg:w="25"/><text x="25.4366%" y="271.50"></text></g><g><title>__rdl_alloc (8 samples, 0.50%)</title><rect x="26.7413%" y="261" width="0.4975%" height="15" fill="rgb(211,146,34)" fg:x="430" fg:w="8"/><text x="26.9913%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.12%)</title><rect x="27.1144%" y="245" width="0.1244%" height="15" fill="rgb(228,22,38)" fg:x="436" fg:w="2"/><text x="27.3644%" y="255.50"></text></g><g><title>alloc::string::String::with_capacity (41 samples, 2.55%)</title><rect x="25.0000%" y="389" width="2.5498%" height="15" fill="rgb(235,168,5)" fg:x="402" fg:w="41"/><text x="25.2500%" y="399.50">al..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (41 samples, 2.55%)</title><rect x="25.0000%" y="373" width="2.5498%" height="15" fill="rgb(221,155,16)" fg:x="402" fg:w="41"/><text x="25.2500%" y="383.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (41 samples, 2.55%)</title><rect x="25.0000%" y="357" width="2.5498%" height="15" fill="rgb(215,215,53)" fg:x="402" fg:w="41"/><text x="25.2500%" y="367.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (41 samples, 2.55%)</title><rect x="25.0000%" y="341" width="2.5498%" height="15" fill="rgb(223,4,10)" fg:x="402" fg:w="41"/><text x="25.2500%" y="351.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (41 samples, 2.55%)</title><rect x="25.0000%" y="325" width="2.5498%" height="15" fill="rgb(234,103,6)" fg:x="402" fg:w="41"/><text x="25.2500%" y="335.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (41 samples, 2.55%)</title><rect x="25.0000%" y="309" width="2.5498%" height="15" fill="rgb(227,97,0)" fg:x="402" fg:w="41"/><text x="25.2500%" y="319.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (41 samples, 2.55%)</title><rect x="25.0000%" y="293" width="2.5498%" height="15" fill="rgb(234,150,53)" fg:x="402" fg:w="41"/><text x="25.2500%" y="303.50">al..</text></g><g><title>alloc::alloc::alloc (41 samples, 2.55%)</title><rect x="25.0000%" y="277" width="2.5498%" height="15" fill="rgb(228,201,54)" fg:x="402" fg:w="41"/><text x="25.2500%" y="287.50">al..</text></g><g><title>__rust_alloc (5 samples, 0.31%)</title><rect x="27.2388%" y="261" width="0.3109%" height="15" fill="rgb(222,22,37)" fg:x="438" fg:w="5"/><text x="27.4888%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="27.9229%" y="373" width="0.0622%" height="15" fill="rgb(237,53,32)" fg:x="449" fg:w="1"/><text x="28.1729%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (11 samples, 0.68%)</title><rect x="29.3532%" y="277" width="0.6841%" height="15" fill="rgb(233,25,53)" fg:x="472" fg:w="11"/><text x="29.6032%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.12%)</title><rect x="29.9129%" y="261" width="0.1244%" height="15" fill="rgb(210,40,34)" fg:x="481" fg:w="2"/><text x="30.1629%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::ops::arith::Add&lt;&amp;str&gt;&gt;::add (24 samples, 1.49%)</title><rect x="29.0423%" y="357" width="1.4925%" height="15" fill="rgb(241,220,44)" fg:x="467" fg:w="24"/><text x="29.2923%" y="367.50"></text></g><g><title>alloc::string::String::push_str (19 samples, 1.18%)</title><rect x="29.3532%" y="341" width="1.1816%" height="15" fill="rgb(235,28,35)" fg:x="472" fg:w="19"/><text x="29.6032%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (19 samples, 1.18%)</title><rect x="29.3532%" y="325" width="1.1816%" height="15" fill="rgb(210,56,17)" fg:x="472" fg:w="19"/><text x="29.6032%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (19 samples, 1.18%)</title><rect x="29.3532%" y="309" width="1.1816%" height="15" fill="rgb(224,130,29)" fg:x="472" fg:w="19"/><text x="29.6032%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (19 samples, 1.18%)</title><rect x="29.3532%" y="293" width="1.1816%" height="15" fill="rgb(235,212,8)" fg:x="472" fg:w="19"/><text x="29.6032%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.50%)</title><rect x="30.0373%" y="277" width="0.4975%" height="15" fill="rgb(223,33,50)" fg:x="483" fg:w="8"/><text x="30.2873%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 0.50%)</title><rect x="30.0373%" y="261" width="0.4975%" height="15" fill="rgb(219,149,13)" fg:x="483" fg:w="8"/><text x="30.2873%" y="271.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.06%)</title><rect x="31.7164%" y="341" width="0.0622%" height="15" fill="rgb(250,156,29)" fg:x="510" fg:w="1"/><text x="31.9664%" y="351.50"></text></g><g><title>alloc::string::String::with_capacity (3 samples, 0.19%)</title><rect x="31.7786%" y="341" width="0.1866%" height="15" fill="rgb(216,193,19)" fg:x="511" fg:w="3"/><text x="32.0286%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (5 samples, 0.31%)</title><rect x="32.2139%" y="325" width="0.3109%" height="15" fill="rgb(216,135,14)" fg:x="518" fg:w="5"/><text x="32.4639%" y="335.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (5 samples, 0.31%)</title><rect x="32.2139%" y="309" width="0.3109%" height="15" fill="rgb(241,47,5)" fg:x="518" fg:w="5"/><text x="32.4639%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.31%)</title><rect x="32.2139%" y="293" width="0.3109%" height="15" fill="rgb(233,42,35)" fg:x="518" fg:w="5"/><text x="32.4639%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (5 samples, 0.31%)</title><rect x="32.2139%" y="277" width="0.3109%" height="15" fill="rgb(231,13,6)" fg:x="518" fg:w="5"/><text x="32.4639%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.31%)</title><rect x="32.2139%" y="261" width="0.3109%" height="15" fill="rgb(207,181,40)" fg:x="518" fg:w="5"/><text x="32.4639%" y="271.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (11 samples, 0.68%)</title><rect x="31.9652%" y="341" width="0.6841%" height="15" fill="rgb(254,173,49)" fg:x="514" fg:w="11"/><text x="32.2152%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (2 samples, 0.12%)</title><rect x="32.5249%" y="325" width="0.1244%" height="15" fill="rgb(221,1,38)" fg:x="523" fg:w="2"/><text x="32.7749%" y="335.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (2 samples, 0.12%)</title><rect x="32.5249%" y="309" width="0.1244%" height="15" fill="rgb(206,124,46)" fg:x="523" fg:w="2"/><text x="32.7749%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.12%)</title><rect x="32.5249%" y="293" width="0.1244%" height="15" fill="rgb(249,21,11)" fg:x="523" fg:w="2"/><text x="32.7749%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.12%)</title><rect x="32.5249%" y="277" width="0.1244%" height="15" fill="rgb(222,201,40)" fg:x="523" fg:w="2"/><text x="32.7749%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.12%)</title><rect x="37.1891%" y="213" width="0.1244%" height="15" fill="rgb(235,61,29)" fg:x="598" fg:w="2"/><text x="37.4391%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.06%)</title><rect x="37.2512%" y="197" width="0.0622%" height="15" fill="rgb(219,207,3)" fg:x="599" fg:w="1"/><text x="37.5012%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.06%)</title><rect x="37.2512%" y="181" width="0.0622%" height="15" fill="rgb(222,56,46)" fg:x="599" fg:w="1"/><text x="37.5012%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.06%)</title><rect x="37.2512%" y="165" width="0.0622%" height="15" fill="rgb(239,76,54)" fg:x="599" fg:w="1"/><text x="37.5012%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.06%)</title><rect x="37.2512%" y="149" width="0.0622%" height="15" fill="rgb(231,124,27)" fg:x="599" fg:w="1"/><text x="37.5012%" y="159.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (18 samples, 1.12%)</title><rect x="36.4428%" y="309" width="1.1194%" height="15" fill="rgb(249,195,6)" fg:x="586" fg:w="18"/><text x="36.6928%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (10 samples, 0.62%)</title><rect x="36.9403%" y="293" width="0.6219%" height="15" fill="rgb(237,174,47)" fg:x="594" fg:w="10"/><text x="37.1903%" y="303.50"></text></g><g><title>alloc::string::String::push_str (10 samples, 0.62%)</title><rect x="36.9403%" y="277" width="0.6219%" height="15" fill="rgb(206,201,31)" fg:x="594" fg:w="10"/><text x="37.1903%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (10 samples, 0.62%)</title><rect x="36.9403%" y="261" width="0.6219%" height="15" fill="rgb(231,57,52)" fg:x="594" fg:w="10"/><text x="37.1903%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (10 samples, 0.62%)</title><rect x="36.9403%" y="245" width="0.6219%" height="15" fill="rgb(248,177,22)" fg:x="594" fg:w="10"/><text x="37.1903%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (10 samples, 0.62%)</title><rect x="36.9403%" y="229" width="0.6219%" height="15" fill="rgb(215,211,37)" fg:x="594" fg:w="10"/><text x="37.1903%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.25%)</title><rect x="37.3134%" y="213" width="0.2488%" height="15" fill="rgb(241,128,51)" fg:x="600" fg:w="4"/><text x="37.5634%" y="223.50"></text></g><g><title>__memcpy_avx_unaligned (4 samples, 0.25%)</title><rect x="37.3134%" y="197" width="0.2488%" height="15" fill="rgb(227,165,31)" fg:x="600" fg:w="4"/><text x="37.5634%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.31%)</title><rect x="37.5622%" y="309" width="0.3109%" height="15" fill="rgb(228,167,24)" fg:x="604" fg:w="5"/><text x="37.8122%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (5 samples, 0.31%)</title><rect x="37.5622%" y="293" width="0.3109%" height="15" fill="rgb(228,143,12)" fg:x="604" fg:w="5"/><text x="37.8122%" y="303.50"></text></g><g><title>&lt;&amp;T as core::fmt::UpperHex&gt;::fmt (9 samples, 0.56%)</title><rect x="39.3035%" y="293" width="0.5597%" height="15" fill="rgb(249,149,8)" fg:x="632" fg:w="9"/><text x="39.5535%" y="303.50"></text></g><g><title>core::fmt::getcount (6 samples, 0.37%)</title><rect x="39.8632%" y="293" width="0.3731%" height="15" fill="rgb(243,35,44)" fg:x="641" fg:w="6"/><text x="40.1132%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (2 samples, 0.12%)</title><rect x="41.0448%" y="101" width="0.1244%" height="15" fill="rgb(246,89,9)" fg:x="660" fg:w="2"/><text x="41.2948%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.12%)</title><rect x="41.1692%" y="101" width="0.1244%" height="15" fill="rgb(233,213,13)" fg:x="662" fg:w="2"/><text x="41.4192%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr (1 samples, 0.06%)</title><rect x="41.2935%" y="101" width="0.0622%" height="15" fill="rgb(233,141,41)" fg:x="664" fg:w="1"/><text x="41.5435%" y="111.50"></text></g><g><title>__GI___libc_malloc (15 samples, 0.93%)</title><rect x="41.7910%" y="85" width="0.9328%" height="15" fill="rgb(239,167,4)" fg:x="672" fg:w="15"/><text x="42.0410%" y="95.50"></text></g><g><title>__rdl_alloc (10 samples, 0.62%)</title><rect x="42.7239%" y="85" width="0.6219%" height="15" fill="rgb(209,217,16)" fg:x="687" fg:w="10"/><text x="42.9739%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.50%)</title><rect x="42.8483%" y="69" width="0.4975%" height="15" fill="rgb(219,88,35)" fg:x="689" fg:w="8"/><text x="43.0983%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (39 samples, 2.43%)</title><rect x="41.3557%" y="101" width="2.4254%" height="15" fill="rgb(220,193,23)" fg:x="665" fg:w="39"/><text x="41.6057%" y="111.50">al..</text></g><g><title>__rust_alloc (7 samples, 0.44%)</title><rect x="43.3458%" y="85" width="0.4353%" height="15" fill="rgb(230,90,52)" fg:x="697" fg:w="7"/><text x="43.5958%" y="95.50"></text></g><g><title>core::cmp::max (5 samples, 0.31%)</title><rect x="43.7811%" y="101" width="0.3109%" height="15" fill="rgb(252,106,19)" fg:x="704" fg:w="5"/><text x="44.0311%" y="111.50"></text></g><g><title>core::cmp::Ord::max (5 samples, 0.31%)</title><rect x="43.7811%" y="85" width="0.3109%" height="15" fill="rgb(206,74,20)" fg:x="704" fg:w="5"/><text x="44.0311%" y="95.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (5 samples, 0.31%)</title><rect x="43.7811%" y="69" width="0.3109%" height="15" fill="rgb(230,138,44)" fg:x="704" fg:w="5"/><text x="44.0311%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (55 samples, 3.42%)</title><rect x="40.7960%" y="165" width="3.4204%" height="15" fill="rgb(235,182,43)" fg:x="656" fg:w="55"/><text x="41.0460%" y="175.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (51 samples, 3.17%)</title><rect x="41.0448%" y="149" width="3.1716%" height="15" fill="rgb(242,16,51)" fg:x="660" fg:w="51"/><text x="41.2948%" y="159.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (51 samples, 3.17%)</title><rect x="41.0448%" y="133" width="3.1716%" height="15" fill="rgb(248,9,4)" fg:x="660" fg:w="51"/><text x="41.2948%" y="143.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (51 samples, 3.17%)</title><rect x="41.0448%" y="117" width="3.1716%" height="15" fill="rgb(210,31,22)" fg:x="660" fg:w="51"/><text x="41.2948%" y="127.50">all..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.12%)</title><rect x="44.0920%" y="101" width="0.1244%" height="15" fill="rgb(239,54,39)" fg:x="709" fg:w="2"/><text x="44.3420%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.12%)</title><rect x="44.0920%" y="85" width="0.1244%" height="15" fill="rgb(230,99,41)" fg:x="709" fg:w="2"/><text x="44.3420%" y="95.50"></text></g><g><title>__memcpy_avx_unaligned (4 samples, 0.25%)</title><rect x="44.2164%" y="149" width="0.2488%" height="15" fill="rgb(253,106,12)" fg:x="711" fg:w="4"/><text x="44.4664%" y="159.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (77 samples, 4.79%)</title><rect x="40.3607%" y="261" width="4.7886%" height="15" fill="rgb(213,46,41)" fg:x="649" fg:w="77"/><text x="40.6107%" y="271.50">&lt;&amp;mut ..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (73 samples, 4.54%)</title><rect x="40.6095%" y="245" width="4.5398%" height="15" fill="rgb(215,133,35)" fg:x="653" fg:w="73"/><text x="40.8595%" y="255.50">&lt;allo..</text></g><g><title>alloc::string::String::push_str (73 samples, 4.54%)</title><rect x="40.6095%" y="229" width="4.5398%" height="15" fill="rgb(213,28,5)" fg:x="653" fg:w="73"/><text x="40.8595%" y="239.50">alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (73 samples, 4.54%)</title><rect x="40.6095%" y="213" width="4.5398%" height="15" fill="rgb(215,77,49)" fg:x="653" fg:w="73"/><text x="40.8595%" y="223.50">alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (73 samples, 4.54%)</title><rect x="40.6095%" y="197" width="4.5398%" height="15" fill="rgb(248,100,22)" fg:x="653" fg:w="73"/><text x="40.8595%" y="207.50">&lt;allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (73 samples, 4.54%)</title><rect x="40.6095%" y="181" width="4.5398%" height="15" fill="rgb(208,67,9)" fg:x="653" fg:w="73"/><text x="40.8595%" y="191.50">alloc..</text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.93%)</title><rect x="44.2164%" y="165" width="0.9328%" height="15" fill="rgb(219,133,21)" fg:x="711" fg:w="15"/><text x="44.4664%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (11 samples, 0.68%)</title><rect x="44.4652%" y="149" width="0.6841%" height="15" fill="rgb(246,46,29)" fg:x="715" fg:w="11"/><text x="44.7152%" y="159.50"></text></g><g><title>&lt;core::fmt::num::UpperHex as core::fmt::num::GenericRadix&gt;::digit (7 samples, 0.44%)</title><rect x="45.1493%" y="261" width="0.4353%" height="15" fill="rgb(246,185,52)" fg:x="726" fg:w="7"/><text x="45.3993%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.19%)</title><rect x="45.5846%" y="261" width="0.1866%" height="15" fill="rgb(252,136,11)" fg:x="733" fg:w="3"/><text x="45.8346%" y="271.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (3 samples, 0.19%)</title><rect x="45.5846%" y="245" width="0.1866%" height="15" fill="rgb(219,138,53)" fg:x="733" fg:w="3"/><text x="45.8346%" y="255.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::pre_dec_end (3 samples, 0.19%)</title><rect x="45.5846%" y="229" width="0.1866%" height="15" fill="rgb(211,51,23)" fg:x="733" fg:w="3"/><text x="45.8346%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.19%)</title><rect x="45.5846%" y="213" width="0.1866%" height="15" fill="rgb(247,221,28)" fg:x="733" fg:w="3"/><text x="45.8346%" y="223.50"></text></g><g><title>&lt;u8 as core::ops::arith::Div&gt;::div (2 samples, 0.12%)</title><rect x="45.7711%" y="261" width="0.1244%" height="15" fill="rgb(251,222,45)" fg:x="736" fg:w="2"/><text x="46.0211%" y="271.50"></text></g><g><title>&lt;u8 as core::ops::arith::Rem&gt;::rem (3 samples, 0.19%)</title><rect x="45.8955%" y="261" width="0.1866%" height="15" fill="rgb(217,162,53)" fg:x="738" fg:w="3"/><text x="46.1455%" y="271.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (1 samples, 0.06%)</title><rect x="46.0821%" y="261" width="0.0622%" height="15" fill="rgb(229,93,14)" fg:x="741" fg:w="1"/><text x="46.3321%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.06%)</title><rect x="46.0821%" y="245" width="0.0622%" height="15" fill="rgb(209,67,49)" fg:x="741" fg:w="1"/><text x="46.3321%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.06%)</title><rect x="46.0821%" y="229" width="0.0622%" height="15" fill="rgb(213,87,29)" fg:x="741" fg:w="1"/><text x="46.3321%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.19%)</title><rect x="48.8184%" y="149" width="0.1866%" height="15" fill="rgb(205,151,52)" fg:x="785" fg:w="3"/><text x="49.0684%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.06%)</title><rect x="48.9428%" y="133" width="0.0622%" height="15" fill="rgb(253,215,39)" fg:x="787" fg:w="1"/><text x="49.1928%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.06%)</title><rect x="48.9428%" y="117" width="0.0622%" height="15" fill="rgb(221,220,41)" fg:x="787" fg:w="1"/><text x="49.1928%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.06%)</title><rect x="48.9428%" y="101" width="0.0622%" height="15" fill="rgb(218,133,21)" fg:x="787" fg:w="1"/><text x="49.1928%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.06%)</title><rect x="48.9428%" y="85" width="0.0622%" height="15" fill="rgb(221,193,43)" fg:x="787" fg:w="1"/><text x="49.1928%" y="95.50"></text></g><g><title>__memcpy_avx_unaligned (5 samples, 0.31%)</title><rect x="49.1915%" y="133" width="0.3109%" height="15" fill="rgb(240,128,52)" fg:x="791" fg:w="5"/><text x="49.4415%" y="143.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (19 samples, 1.18%)</title><rect x="48.5075%" y="245" width="1.1816%" height="15" fill="rgb(253,114,12)" fg:x="780" fg:w="19"/><text x="48.7575%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (17 samples, 1.06%)</title><rect x="48.6318%" y="229" width="1.0572%" height="15" fill="rgb(215,223,47)" fg:x="782" fg:w="17"/><text x="48.8818%" y="239.50"></text></g><g><title>alloc::string::String::push_str (17 samples, 1.06%)</title><rect x="48.6318%" y="213" width="1.0572%" height="15" fill="rgb(248,225,23)" fg:x="782" fg:w="17"/><text x="48.8818%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (17 samples, 1.06%)</title><rect x="48.6318%" y="197" width="1.0572%" height="15" fill="rgb(250,108,0)" fg:x="782" fg:w="17"/><text x="48.8818%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (17 samples, 1.06%)</title><rect x="48.6318%" y="181" width="1.0572%" height="15" fill="rgb(228,208,7)" fg:x="782" fg:w="17"/><text x="48.8818%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (17 samples, 1.06%)</title><rect x="48.6318%" y="165" width="1.0572%" height="15" fill="rgb(244,45,10)" fg:x="782" fg:w="17"/><text x="48.8818%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.68%)</title><rect x="49.0050%" y="149" width="0.6841%" height="15" fill="rgb(207,125,25)" fg:x="788" fg:w="11"/><text x="49.2550%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.19%)</title><rect x="49.5025%" y="133" width="0.1866%" height="15" fill="rgb(210,195,18)" fg:x="796" fg:w="3"/><text x="49.7525%" y="143.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 samples, 0.68%)</title><rect x="49.6891%" y="245" width="0.6841%" height="15" fill="rgb(249,80,12)" fg:x="799" fg:w="11"/><text x="49.9391%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (3 samples, 0.19%)</title><rect x="51.9279%" y="101" width="0.1866%" height="15" fill="rgb(221,65,9)" fg:x="835" fg:w="3"/><text x="52.1779%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.25%)</title><rect x="52.1144%" y="101" width="0.2488%" height="15" fill="rgb(235,49,36)" fg:x="838" fg:w="4"/><text x="52.3644%" y="111.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.62%)</title><rect x="52.5498%" y="85" width="0.6219%" height="15" fill="rgb(225,32,20)" fg:x="845" fg:w="10"/><text x="52.7998%" y="95.50"></text></g><g><title>__rdl_alloc (2 samples, 0.12%)</title><rect x="53.1716%" y="85" width="0.1244%" height="15" fill="rgb(215,141,46)" fg:x="855" fg:w="2"/><text x="53.4216%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.12%)</title><rect x="53.1716%" y="69" width="0.1244%" height="15" fill="rgb(250,160,47)" fg:x="855" fg:w="2"/><text x="53.4216%" y="79.50"></text></g><g><title>core::fmt::Formatter::padding (49 samples, 3.05%)</title><rect x="50.3731%" y="245" width="3.0473%" height="15" fill="rgb(216,222,40)" fg:x="810" fg:w="49"/><text x="50.6231%" y="255.50">cor..</text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (33 samples, 2.05%)</title><rect x="51.3682%" y="229" width="2.0522%" height="15" fill="rgb(234,217,39)" fg:x="826" fg:w="33"/><text x="51.6182%" y="239.50">&lt;..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char (30 samples, 1.87%)</title><rect x="51.5547%" y="213" width="1.8657%" height="15" fill="rgb(207,178,40)" fg:x="829" fg:w="30"/><text x="51.8047%" y="223.50">&lt;..</text></g><g><title>alloc::string::String::push (30 samples, 1.87%)</title><rect x="51.5547%" y="197" width="1.8657%" height="15" fill="rgb(221,136,13)" fg:x="829" fg:w="30"/><text x="51.8047%" y="207.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (25 samples, 1.55%)</title><rect x="51.8657%" y="181" width="1.5547%" height="15" fill="rgb(249,199,10)" fg:x="834" fg:w="25"/><text x="52.1157%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (24 samples, 1.49%)</title><rect x="51.9279%" y="165" width="1.4925%" height="15" fill="rgb(249,222,13)" fg:x="835" fg:w="24"/><text x="52.1779%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (24 samples, 1.49%)</title><rect x="51.9279%" y="149" width="1.4925%" height="15" fill="rgb(244,185,38)" fg:x="835" fg:w="24"/><text x="52.1779%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (24 samples, 1.49%)</title><rect x="51.9279%" y="133" width="1.4925%" height="15" fill="rgb(236,202,9)" fg:x="835" fg:w="24"/><text x="52.1779%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (24 samples, 1.49%)</title><rect x="51.9279%" y="117" width="1.4925%" height="15" fill="rgb(250,229,37)" fg:x="835" fg:w="24"/><text x="52.1779%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (17 samples, 1.06%)</title><rect x="52.3632%" y="101" width="1.0572%" height="15" fill="rgb(206,174,23)" fg:x="842" fg:w="17"/><text x="52.6132%" y="111.50"></text></g><g><title>__rust_alloc (2 samples, 0.12%)</title><rect x="53.2960%" y="85" width="0.1244%" height="15" fill="rgb(211,33,43)" fg:x="857" fg:w="2"/><text x="53.5460%" y="95.50"></text></g><g><title>core::fmt::Formatter::pad_integral (122 samples, 7.59%)</title><rect x="46.1443%" y="261" width="7.5871%" height="15" fill="rgb(245,58,50)" fg:x="742" fg:w="122"/><text x="46.3943%" y="271.50">core::fmt:..</text></g><g><title>core::fmt::Formatter::sign_plus (5 samples, 0.31%)</title><rect x="53.4204%" y="245" width="0.3109%" height="15" fill="rgb(244,68,36)" fg:x="859" fg:w="5"/><text x="53.6704%" y="255.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (4 samples, 0.25%)</title><rect x="53.7313%" y="261" width="0.2488%" height="15" fill="rgb(232,229,15)" fg:x="864" fg:w="4"/><text x="53.9813%" y="271.50"></text></g><g><title>core::fmt::num::&lt;impl core::fmt::UpperHex for i8&gt;::fmt (227 samples, 14.12%)</title><rect x="40.2363%" y="293" width="14.1169%" height="15" fill="rgb(254,30,23)" fg:x="647" fg:w="227"/><text x="40.4863%" y="303.50">core::fmt::num::&lt;impl..</text></g><g><title>core::fmt::num::GenericRadix::fmt_int (226 samples, 14.05%)</title><rect x="40.2985%" y="277" width="14.0547%" height="15" fill="rgb(235,160,14)" fg:x="648" fg:w="226"/><text x="40.5485%" y="287.50">core::fmt::num::Gener..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter_mut (6 samples, 0.37%)</title><rect x="53.9801%" y="261" width="0.3731%" height="15" fill="rgb(212,155,44)" fg:x="868" fg:w="6"/><text x="54.2301%" y="271.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::new (6 samples, 0.37%)</title><rect x="53.9801%" y="245" width="0.3731%" height="15" fill="rgb(226,2,50)" fg:x="868" fg:w="6"/><text x="54.2301%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (6 samples, 0.37%)</title><rect x="53.9801%" y="229" width="0.3731%" height="15" fill="rgb(234,177,6)" fg:x="868" fg:w="6"/><text x="54.2301%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (6 samples, 0.37%)</title><rect x="53.9801%" y="213" width="0.3731%" height="15" fill="rgb(217,24,9)" fg:x="868" fg:w="6"/><text x="54.2301%" y="223.50"></text></g><g><title>core::fmt::run (267 samples, 16.60%)</title><rect x="37.8731%" y="309" width="16.6045%" height="15" fill="rgb(220,13,46)" fg:x="609" fg:w="267"/><text x="38.1231%" y="319.50">core::fmt::run</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (2 samples, 0.12%)</title><rect x="54.3532%" y="293" width="0.1244%" height="15" fill="rgb(239,221,27)" fg:x="874" fg:w="2"/><text x="54.6032%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.12%)</title><rect x="54.3532%" y="277" width="0.1244%" height="15" fill="rgb(222,198,25)" fg:x="874" fg:w="2"/><text x="54.6032%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.12%)</title><rect x="54.3532%" y="261" width="0.1244%" height="15" fill="rgb(211,99,13)" fg:x="874" fg:w="2"/><text x="54.6032%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.12%)</title><rect x="54.3532%" y="245" width="0.1244%" height="15" fill="rgb(232,111,31)" fg:x="874" fg:w="2"/><text x="54.6032%" y="255.50"></text></g><g><title>core::fmt::Write::write_fmt (352 samples, 21.89%)</title><rect x="32.6493%" y="341" width="21.8905%" height="15" fill="rgb(245,82,37)" fg:x="525" fg:w="352"/><text x="32.8993%" y="351.50">core::fmt::Write::write_fmt</text></g><g><title>core::fmt::write (317 samples, 19.71%)</title><rect x="34.8259%" y="325" width="19.7139%" height="15" fill="rgb(227,149,46)" fg:x="560" fg:w="317"/><text x="35.0759%" y="335.50">core::fmt::write</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.06%)</title><rect x="54.4776%" y="309" width="0.0622%" height="15" fill="rgb(218,36,50)" fg:x="876" fg:w="1"/><text x="54.7276%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.06%)</title><rect x="54.4776%" y="293" width="0.0622%" height="15" fill="rgb(226,80,48)" fg:x="876" fg:w="1"/><text x="54.7276%" y="303.50"></text></g><g><title>alloc::fmt::format (388 samples, 24.13%)</title><rect x="30.5348%" y="357" width="24.1294%" height="15" fill="rgb(238,224,15)" fg:x="491" fg:w="388"/><text x="30.7848%" y="367.50">alloc::fmt::format</text></g><g><title>core::result::Result&lt;T,E&gt;::expect (2 samples, 0.12%)</title><rect x="54.5398%" y="341" width="0.1244%" height="15" fill="rgb(241,136,10)" fg:x="877" fg:w="2"/><text x="54.7898%" y="351.50"></text></g><g><title>core::fmt::Arguments::new_v1_formatted (9 samples, 0.56%)</title><rect x="54.6642%" y="357" width="0.5597%" height="15" fill="rgb(208,32,45)" fg:x="879" fg:w="9"/><text x="54.9142%" y="367.50"></text></g><g><title>__GI___libc_free (65 samples, 4.04%)</title><rect x="55.2861%" y="261" width="4.0423%" height="15" fill="rgb(207,135,9)" fg:x="889" fg:w="65"/><text x="55.5361%" y="271.50">__GI..</text></g><g><title>_int_free (35 samples, 2.18%)</title><rect x="57.1517%" y="245" width="2.1766%" height="15" fill="rgb(206,86,44)" fg:x="919" fg:w="35"/><text x="57.4017%" y="255.50">_..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (961 samples, 59.76%)</title><rect x="0.1866%" y="565" width="59.7637%" height="15" fill="rgb(245,177,15)" fg:x="3" fg:w="961"/><text x="0.4366%" y="575.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (961 samples, 59.76%)</title><rect x="0.1866%" y="549" width="59.7637%" height="15" fill="rgb(206,64,50)" fg:x="3" fg:w="961"/><text x="0.4366%" y="559.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (961 samples, 59.76%)</title><rect x="0.1866%" y="533" width="59.7637%" height="15" fill="rgb(234,36,40)" fg:x="3" fg:w="961"/><text x="0.4366%" y="543.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once</text></g><g><title>hexi_lib::hexi::Hexi::dump_file::{{closure}} (961 samples, 59.76%)</title><rect x="0.1866%" y="517" width="59.7637%" height="15" fill="rgb(213,64,8)" fg:x="3" fg:w="961"/><text x="0.4366%" y="527.50">hexi_lib::hexi::Hexi::dump_file::{{closure}}</text></g><g><title>hexi_lib::document::Document::format_line (831 samples, 51.68%)</title><rect x="8.2711%" y="501" width="51.6791%" height="15" fill="rgb(210,75,36)" fg:x="133" fg:w="831"/><text x="8.5211%" y="511.50">hexi_lib::document::Document::format_line</text></g><g><title>core::iter::traits::iterator::Iterator::fold (823 samples, 51.18%)</title><rect x="8.7687%" y="485" width="51.1816%" height="15" fill="rgb(229,88,21)" fg:x="141" fg:w="823"/><text x="9.0187%" y="495.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>hexi_lib::document::Document::format_line::{{closure}} (819 samples, 50.93%)</title><rect x="9.0174%" y="469" width="50.9328%" height="15" fill="rgb(252,204,47)" fg:x="145" fg:w="819"/><text x="9.2674%" y="479.50">hexi_lib::document::Document::format_line::{{closure}}</text></g><g><title>hexi_lib::document::Document::format_section (768 samples, 47.76%)</title><rect x="12.1891%" y="453" width="47.7612%" height="15" fill="rgb(208,77,27)" fg:x="196" fg:w="768"/><text x="12.4391%" y="463.50">hexi_lib::document::Document::format_section</text></g><g><title>core::iter::traits::iterator::Iterator::fold (757 samples, 47.08%)</title><rect x="12.8731%" y="437" width="47.0771%" height="15" fill="rgb(221,76,26)" fg:x="207" fg:w="757"/><text x="13.1231%" y="447.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>hexi_lib::document::Document::format_section::{{closure}} (752 samples, 46.77%)</title><rect x="13.1841%" y="421" width="46.7662%" height="15" fill="rgb(225,139,18)" fg:x="212" fg:w="752"/><text x="13.4341%" y="431.50">hexi_lib::document::Document::format_section::{{closure}}</text></g><g><title>hexi_lib::document::Document::format_chunk (562 samples, 34.95%)</title><rect x="25.0000%" y="405" width="34.9502%" height="15" fill="rgb(230,137,11)" fg:x="402" fg:w="562"/><text x="25.2500%" y="415.50">hexi_lib::document::Document::format_chunk</text></g><g><title>core::iter::traits::iterator::Iterator::fold (521 samples, 32.40%)</title><rect x="27.5498%" y="389" width="32.4005%" height="15" fill="rgb(212,28,1)" fg:x="443" fg:w="521"/><text x="27.7998%" y="399.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>hexi_lib::document::Document::format_chunk::{{closure}} (514 samples, 31.97%)</title><rect x="27.9851%" y="373" width="31.9652%" height="15" fill="rgb(248,164,17)" fg:x="450" fg:w="514"/><text x="28.2351%" y="383.50">hexi_lib::document::Document::format_chunk::{{closur..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (76 samples, 4.73%)</title><rect x="55.2239%" y="357" width="4.7264%" height="15" fill="rgb(222,171,42)" fg:x="888" fg:w="76"/><text x="55.4739%" y="367.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (76 samples, 4.73%)</title><rect x="55.2239%" y="341" width="4.7264%" height="15" fill="rgb(243,84,45)" fg:x="888" fg:w="76"/><text x="55.4739%" y="351.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (76 samples, 4.73%)</title><rect x="55.2239%" y="325" width="4.7264%" height="15" fill="rgb(252,49,23)" fg:x="888" fg:w="76"/><text x="55.4739%" y="335.50">core::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (76 samples, 4.73%)</title><rect x="55.2239%" y="309" width="4.7264%" height="15" fill="rgb(215,19,7)" fg:x="888" fg:w="76"/><text x="55.4739%" y="319.50">&lt;alloc..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (76 samples, 4.73%)</title><rect x="55.2239%" y="293" width="4.7264%" height="15" fill="rgb(238,81,41)" fg:x="888" fg:w="76"/><text x="55.4739%" y="303.50">&lt;alloc..</text></g><g><title>alloc::alloc::dealloc (76 samples, 4.73%)</title><rect x="55.2239%" y="277" width="4.7264%" height="15" fill="rgb(210,199,37)" fg:x="888" fg:w="76"/><text x="55.4739%" y="287.50">alloc:..</text></g><g><title>__rust_dealloc (10 samples, 0.62%)</title><rect x="59.3284%" y="261" width="0.6219%" height="15" fill="rgb(244,192,49)" fg:x="954" fg:w="10"/><text x="59.5784%" y="271.50"></text></g><g><title>core::fmt::Arguments::new_v1 (1 samples, 0.06%)</title><rect x="59.9502%" y="565" width="0.0622%" height="15" fill="rgb(226,211,11)" fg:x="964" fg:w="1"/><text x="60.2002%" y="575.50"></text></g><g><title>__GI___libc_free (11 samples, 0.68%)</title><rect x="60.0124%" y="469" width="0.6841%" height="15" fill="rgb(236,162,54)" fg:x="965" fg:w="11"/><text x="60.2624%" y="479.50"></text></g><g><title>_int_free (2 samples, 0.12%)</title><rect x="60.5721%" y="453" width="0.1244%" height="15" fill="rgb(220,229,9)" fg:x="974" fg:w="2"/><text x="60.8221%" y="463.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.12%)</title><rect x="60.6965%" y="469" width="0.1244%" height="15" fill="rgb(250,87,22)" fg:x="976" fg:w="2"/><text x="60.9465%" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.12%)</title><rect x="60.6965%" y="453" width="0.1244%" height="15" fill="rgb(239,43,17)" fg:x="976" fg:w="2"/><text x="60.9465%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.87%)</title><rect x="60.0124%" y="501" width="0.8706%" height="15" fill="rgb(231,177,25)" fg:x="965" fg:w="14"/><text x="60.2624%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.87%)</title><rect x="60.0124%" y="485" width="0.8706%" height="15" fill="rgb(219,179,1)" fg:x="965" fg:w="14"/><text x="60.2624%" y="495.50"></text></g><g><title>__rust_dealloc (1 samples, 0.06%)</title><rect x="60.8209%" y="469" width="0.0622%" height="15" fill="rgb(238,219,53)" fg:x="978" fg:w="1"/><text x="61.0709%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (15 samples, 0.93%)</title><rect x="60.0124%" y="565" width="0.9328%" height="15" fill="rgb(232,167,36)" fg:x="965" fg:w="15"/><text x="60.2624%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (15 samples, 0.93%)</title><rect x="60.0124%" y="549" width="0.9328%" height="15" fill="rgb(244,19,51)" fg:x="965" fg:w="15"/><text x="60.2624%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (15 samples, 0.93%)</title><rect x="60.0124%" y="533" width="0.9328%" height="15" fill="rgb(224,6,22)" fg:x="965" fg:w="15"/><text x="60.2624%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.93%)</title><rect x="60.0124%" y="517" width="0.9328%" height="15" fill="rgb(224,145,5)" fg:x="965" fg:w="15"/><text x="60.2624%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.06%)</title><rect x="60.8831%" y="501" width="0.0622%" height="15" fill="rgb(234,130,49)" fg:x="979" fg:w="1"/><text x="61.1331%" y="511.50"></text></g><g><title>__GI___pthread_mutex_unlock (2 samples, 0.12%)</title><rect x="61.6915%" y="437" width="0.1244%" height="15" fill="rgb(254,6,2)" fg:x="992" fg:w="2"/><text x="61.9415%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::stdio::StdoutLock&gt; (5 samples, 0.31%)</title><rect x="61.6915%" y="501" width="0.3109%" height="15" fill="rgb(208,96,46)" fg:x="992" fg:w="5"/><text x="61.9415%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt;&gt; (5 samples, 0.31%)</title><rect x="61.6915%" y="485" width="0.3109%" height="15" fill="rgb(239,3,39)" fg:x="992" fg:w="5"/><text x="61.9415%" y="495.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.31%)</title><rect x="61.6915%" y="469" width="0.3109%" height="15" fill="rgb(233,210,1)" fg:x="992" fg:w="5"/><text x="61.9415%" y="479.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (5 samples, 0.31%)</title><rect x="61.6915%" y="453" width="0.3109%" height="15" fill="rgb(244,137,37)" fg:x="992" fg:w="5"/><text x="61.9415%" y="463.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (3 samples, 0.19%)</title><rect x="61.8159%" y="437" width="0.1866%" height="15" fill="rgb(240,136,2)" fg:x="994" fg:w="3"/><text x="62.0659%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.06%)</title><rect x="62.5000%" y="469" width="0.0622%" height="15" fill="rgb(239,18,37)" fg:x="1005" fg:w="1"/><text x="62.7500%" y="479.50"></text></g><g><title>__memcpy_avx_unaligned (10 samples, 0.62%)</title><rect x="64.0547%" y="325" width="0.6219%" height="15" fill="rgb(218,185,22)" fg:x="1030" fg:w="10"/><text x="64.3047%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.68%)</title><rect x="64.0547%" y="341" width="0.6841%" height="15" fill="rgb(225,218,4)" fg:x="1030" fg:w="11"/><text x="64.3047%" y="351.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="64.6766%" y="325" width="0.0622%" height="15" fill="rgb(230,182,32)" fg:x="1040" fg:w="1"/><text x="64.9266%" y="335.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (17 samples, 1.06%)</title><rect x="63.7438%" y="405" width="1.0572%" height="15" fill="rgb(242,56,43)" fg:x="1025" fg:w="17"/><text x="63.9938%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (16 samples, 1.00%)</title><rect x="63.8060%" y="389" width="0.9950%" height="15" fill="rgb(233,99,24)" fg:x="1026" fg:w="16"/><text x="64.0560%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (16 samples, 1.00%)</title><rect x="63.8060%" y="373" width="0.9950%" height="15" fill="rgb(234,209,42)" fg:x="1026" fg:w="16"/><text x="64.0560%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (16 samples, 1.00%)</title><rect x="63.8060%" y="357" width="0.9950%" height="15" fill="rgb(227,7,12)" fg:x="1026" fg:w="16"/><text x="64.0560%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.06%)</title><rect x="64.7388%" y="341" width="0.0622%" height="15" fill="rgb(245,203,43)" fg:x="1041" fg:w="1"/><text x="64.9888%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.06%)</title><rect x="64.7388%" y="325" width="0.0622%" height="15" fill="rgb(238,205,33)" fg:x="1041" fg:w="1"/><text x="64.9888%" y="335.50"></text></g><g><title>__libc_write (534 samples, 33.21%)</title><rect x="65.1741%" y="341" width="33.2090%" height="15" fill="rgb(231,56,7)" fg:x="1048" fg:w="534"/><text x="65.4241%" y="351.50">__libc_write</text></g><g><title>[unknown] (533 samples, 33.15%)</title><rect x="65.2363%" y="325" width="33.1468%" height="15" fill="rgb(244,186,29)" fg:x="1049" fg:w="533"/><text x="65.4863%" y="335.50">[unknown]</text></g><g><title>[unknown] (523 samples, 32.52%)</title><rect x="65.8582%" y="309" width="32.5249%" height="15" fill="rgb(234,111,31)" fg:x="1059" fg:w="523"/><text x="66.1082%" y="319.50">[unknown]</text></g><g><title>[unknown] (523 samples, 32.52%)</title><rect x="65.8582%" y="293" width="32.5249%" height="15" fill="rgb(241,149,10)" fg:x="1059" fg:w="523"/><text x="66.1082%" y="303.50">[unknown]</text></g><g><title>[unknown] (514 samples, 31.97%)</title><rect x="66.4179%" y="277" width="31.9652%" height="15" fill="rgb(249,206,44)" fg:x="1068" fg:w="514"/><text x="66.6679%" y="287.50">[unknown]</text></g><g><title>[unknown] (506 samples, 31.47%)</title><rect x="66.9154%" y="261" width="31.4677%" height="15" fill="rgb(251,153,30)" fg:x="1076" fg:w="506"/><text x="67.1654%" y="271.50">[unknown]</text></g><g><title>[unknown] (480 samples, 29.85%)</title><rect x="68.5323%" y="245" width="29.8507%" height="15" fill="rgb(239,152,38)" fg:x="1102" fg:w="480"/><text x="68.7823%" y="255.50">[unknown]</text></g><g><title>[unknown] (464 samples, 28.86%)</title><rect x="69.5274%" y="229" width="28.8557%" height="15" fill="rgb(249,139,47)" fg:x="1118" fg:w="464"/><text x="69.7774%" y="239.50">[unknown]</text></g><g><title>[unknown] (276 samples, 17.16%)</title><rect x="81.2189%" y="213" width="17.1642%" height="15" fill="rgb(244,64,35)" fg:x="1306" fg:w="276"/><text x="81.4689%" y="223.50">[unknown]</text></g><g><title>[unknown] (228 samples, 14.18%)</title><rect x="84.2040%" y="197" width="14.1791%" height="15" fill="rgb(216,46,15)" fg:x="1354" fg:w="228"/><text x="84.4540%" y="207.50">[unknown]</text></g><g><title>[unknown] (154 samples, 9.58%)</title><rect x="88.8060%" y="181" width="9.5771%" height="15" fill="rgb(250,74,19)" fg:x="1428" fg:w="154"/><text x="89.0560%" y="191.50">[unknown]</text></g><g><title>[unknown] (118 samples, 7.34%)</title><rect x="91.0448%" y="165" width="7.3383%" height="15" fill="rgb(249,42,33)" fg:x="1464" fg:w="118"/><text x="91.2948%" y="175.50">[unknown]</text></g><g><title>[unknown] (74 samples, 4.60%)</title><rect x="93.7811%" y="149" width="4.6020%" height="15" fill="rgb(242,149,17)" fg:x="1508" fg:w="74"/><text x="94.0311%" y="159.50">[unkn..</text></g><g><title>[unknown] (54 samples, 3.36%)</title><rect x="95.0249%" y="133" width="3.3582%" height="15" fill="rgb(244,29,21)" fg:x="1528" fg:w="54"/><text x="95.2749%" y="143.50">[un..</text></g><g><title>[unknown] (29 samples, 1.80%)</title><rect x="96.5796%" y="117" width="1.8035%" height="15" fill="rgb(220,130,37)" fg:x="1553" fg:w="29"/><text x="96.8296%" y="127.50">[..</text></g><g><title>[unknown] (16 samples, 1.00%)</title><rect x="97.3881%" y="101" width="0.9950%" height="15" fill="rgb(211,67,2)" fg:x="1566" fg:w="16"/><text x="97.6381%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.31%)</title><rect x="98.0721%" y="85" width="0.3109%" height="15" fill="rgb(235,68,52)" fg:x="1577" fg:w="5"/><text x="98.3221%" y="95.50"></text></g><g><title>[unknown] (2 samples, 0.12%)</title><rect x="98.2587%" y="69" width="0.1244%" height="15" fill="rgb(246,142,3)" fg:x="1580" fg:w="2"/><text x="98.5087%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="98.3209%" y="53" width="0.0622%" height="15" fill="rgb(241,25,7)" fg:x="1581" fg:w="1"/><text x="98.5709%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="98.3209%" y="37" width="0.0622%" height="15" fill="rgb(242,119,39)" fg:x="1581" fg:w="1"/><text x="98.5709%" y="47.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (543 samples, 33.77%)</title><rect x="64.8632%" y="389" width="33.7687%" height="15" fill="rgb(241,98,45)" fg:x="1043" fg:w="543"/><text x="65.1132%" y="399.50">&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (543 samples, 33.77%)</title><rect x="64.8632%" y="373" width="33.7687%" height="15" fill="rgb(254,28,30)" fg:x="1043" fg:w="543"/><text x="65.1132%" y="383.50">&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write</text></g><g><title>std::sys::unix::fd::FileDesc::write (543 samples, 33.77%)</title><rect x="64.8632%" y="357" width="33.7687%" height="15" fill="rgb(241,142,54)" fg:x="1043" fg:w="543"/><text x="65.1132%" y="367.50">std::sys::unix::fd::FileDesc::write</text></g><g><title>std::sys::unix::cvt (4 samples, 0.25%)</title><rect x="98.3831%" y="341" width="0.2488%" height="15" fill="rgb(222,85,15)" fg:x="1582" fg:w="4"/><text x="98.6331%" y="351.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (4 samples, 0.25%)</title><rect x="98.3831%" y="325" width="0.2488%" height="15" fill="rgb(210,85,47)" fg:x="1582" fg:w="4"/><text x="98.6331%" y="335.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (545 samples, 33.89%)</title><rect x="64.8010%" y="405" width="33.8930%" height="15" fill="rgb(224,206,25)" fg:x="1042" fg:w="545"/><text x="65.0510%" y="415.50">std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard::remaining (1 samples, 0.06%)</title><rect x="98.6318%" y="389" width="0.0622%" height="15" fill="rgb(243,201,19)" fg:x="1586" fg:w="1"/><text x="98.8818%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.06%)</title><rect x="98.6318%" y="373" width="0.0622%" height="15" fill="rgb(236,59,4)" fg:x="1586" fg:w="1"/><text x="98.8818%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.06%)</title><rect x="98.6318%" y="357" width="0.0622%" height="15" fill="rgb(254,179,45)" fg:x="1586" fg:w="1"/><text x="98.8818%" y="367.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.06%)</title><rect x="98.6318%" y="341" width="0.0622%" height="15" fill="rgb(226,14,10)" fg:x="1586" fg:w="1"/><text x="98.8818%" y="351.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (1 samples, 0.06%)</title><rect x="98.6940%" y="405" width="0.0622%" height="15" fill="rgb(244,27,41)" fg:x="1587" fg:w="1"/><text x="98.9440%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (1 samples, 0.06%)</title><rect x="98.6940%" y="389" width="0.0622%" height="15" fill="rgb(235,35,32)" fg:x="1587" fg:w="1"/><text x="98.9440%" y="399.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (568 samples, 35.32%)</title><rect x="63.6816%" y="421" width="35.3234%" height="15" fill="rgb(218,68,31)" fg:x="1024" fg:w="568"/><text x="63.9316%" y="431.50">&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as ..</text></g><g><title>std::memchr::memrchr (4 samples, 0.25%)</title><rect x="98.7562%" y="405" width="0.2488%" height="15" fill="rgb(207,120,37)" fg:x="1588" fg:w="4"/><text x="99.0062%" y="415.50"></text></g><g><title>std::sys::unix::memchr::memrchr (4 samples, 0.25%)</title><rect x="98.7562%" y="389" width="0.2488%" height="15" fill="rgb(227,98,0)" fg:x="1588" fg:w="4"/><text x="99.0062%" y="399.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (4 samples, 0.25%)</title><rect x="98.7562%" y="373" width="0.2488%" height="15" fill="rgb(207,7,3)" fg:x="1588" fg:w="4"/><text x="99.0062%" y="383.50"></text></g><g><title>__memrchr_avx2 (4 samples, 0.25%)</title><rect x="98.7562%" y="357" width="0.2488%" height="15" fill="rgb(206,98,19)" fg:x="1588" fg:w="4"/><text x="99.0062%" y="367.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (570 samples, 35.45%)</title><rect x="63.6816%" y="437" width="35.4478%" height="15" fill="rgb(217,5,26)" fg:x="1024" fg:w="570"/><text x="63.9316%" y="447.50">&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.12%)</title><rect x="99.0050%" y="421" width="0.1244%" height="15" fill="rgb(235,190,38)" fg:x="1592" fg:w="2"/><text x="99.2550%" y="431.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (589 samples, 36.63%)</title><rect x="62.5622%" y="469" width="36.6294%" height="15" fill="rgb(247,86,24)" fg:x="1006" fg:w="589"/><text x="62.8122%" y="479.50">&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;:..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (585 samples, 36.38%)</title><rect x="62.8109%" y="453" width="36.3806%" height="15" fill="rgb(205,101,16)" fg:x="1010" fg:w="585"/><text x="63.0609%" y="463.50">&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.06%)</title><rect x="99.1294%" y="437" width="0.0622%" height="15" fill="rgb(246,168,33)" fg:x="1594" fg:w="1"/><text x="99.3794%" y="447.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.06%)</title><rect x="99.1294%" y="421" width="0.0622%" height="15" fill="rgb(231,114,1)" fg:x="1594" fg:w="1"/><text x="99.3794%" y="431.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.06%)</title><rect x="99.1294%" y="405" width="0.0622%" height="15" fill="rgb(207,184,53)" fg:x="1594" fg:w="1"/><text x="99.3794%" y="415.50"></text></g><g><title>std::io::Write::write_fmt (599 samples, 37.25%)</title><rect x="62.0025%" y="501" width="37.2512%" height="15" fill="rgb(224,95,51)" fg:x="997" fg:w="599"/><text x="62.2525%" y="511.50">std::io::Write::write_fmt</text></g><g><title>core::fmt::write (593 samples, 36.88%)</title><rect x="62.3756%" y="485" width="36.8781%" height="15" fill="rgb(212,188,45)" fg:x="1003" fg:w="593"/><text x="62.6256%" y="495.50">core::fmt::write</text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.06%)</title><rect x="99.1915%" y="469" width="0.0622%" height="15" fill="rgb(223,154,38)" fg:x="1595" fg:w="1"/><text x="99.4415%" y="479.50"></text></g><g><title>__libc_start_main (1,599 samples, 99.44%)</title><rect x="0.1244%" y="773" width="99.4403%" height="15" fill="rgb(251,22,52)" fg:x="2" fg:w="1599"/><text x="0.3744%" y="783.50">__libc_start_main</text></g><g><title>main (1,599 samples, 99.44%)</title><rect x="0.1244%" y="757" width="99.4403%" height="15" fill="rgb(229,209,22)" fg:x="2" fg:w="1599"/><text x="0.3744%" y="767.50">main</text></g><g><title>std::rt::lang_start_internal (1,599 samples, 99.44%)</title><rect x="0.1244%" y="741" width="99.4403%" height="15" fill="rgb(234,138,34)" fg:x="2" fg:w="1599"/><text x="0.3744%" y="751.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,599 samples, 99.44%)</title><rect x="0.1244%" y="725" width="99.4403%" height="15" fill="rgb(212,95,11)" fg:x="2" fg:w="1599"/><text x="0.3744%" y="735.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,599 samples, 99.44%)</title><rect x="0.1244%" y="709" width="99.4403%" height="15" fill="rgb(240,179,47)" fg:x="2" fg:w="1599"/><text x="0.3744%" y="719.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,599 samples, 99.44%)</title><rect x="0.1244%" y="693" width="99.4403%" height="15" fill="rgb(240,163,11)" fg:x="2" fg:w="1599"/><text x="0.3744%" y="703.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,599 samples, 99.44%)</title><rect x="0.1244%" y="677" width="99.4403%" height="15" fill="rgb(236,37,12)" fg:x="2" fg:w="1599"/><text x="0.3744%" y="687.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,599 samples, 99.44%)</title><rect x="0.1244%" y="661" width="99.4403%" height="15" fill="rgb(232,164,16)" fg:x="2" fg:w="1599"/><text x="0.3744%" y="671.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,599 samples, 99.44%)</title><rect x="0.1244%" y="645" width="99.4403%" height="15" fill="rgb(244,205,15)" fg:x="2" fg:w="1599"/><text x="0.3744%" y="655.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,599 samples, 99.44%)</title><rect x="0.1244%" y="629" width="99.4403%" height="15" fill="rgb(223,117,47)" fg:x="2" fg:w="1599"/><text x="0.3744%" y="639.50">core::ops::function::FnOnce::call_once</text></g><g><title>hexi::main (1,599 samples, 99.44%)</title><rect x="0.1244%" y="613" width="99.4403%" height="15" fill="rgb(244,107,35)" fg:x="2" fg:w="1599"/><text x="0.3744%" y="623.50">hexi::main</text></g><g><title>hexi::run (1,599 samples, 99.44%)</title><rect x="0.1244%" y="597" width="99.4403%" height="15" fill="rgb(205,140,8)" fg:x="2" fg:w="1599"/><text x="0.3744%" y="607.50">hexi::run</text></g><g><title>hexi_lib::hexi::Hexi::run (1,599 samples, 99.44%)</title><rect x="0.1244%" y="581" width="99.4403%" height="15" fill="rgb(228,84,46)" fg:x="2" fg:w="1599"/><text x="0.3744%" y="591.50">hexi_lib::hexi::Hexi::run</text></g><g><title>std::io::stdio::_print (621 samples, 38.62%)</title><rect x="60.9453%" y="565" width="38.6194%" height="15" fill="rgb(254,188,9)" fg:x="980" fg:w="621"/><text x="61.1953%" y="575.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to (613 samples, 38.12%)</title><rect x="61.4428%" y="549" width="38.1219%" height="15" fill="rgb(206,112,54)" fg:x="988" fg:w="613"/><text x="61.6928%" y="559.50">std::io::stdio::print_to</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (613 samples, 38.12%)</title><rect x="61.4428%" y="533" width="38.1219%" height="15" fill="rgb(216,84,49)" fg:x="988" fg:w="613"/><text x="61.6928%" y="543.50">&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (610 samples, 37.94%)</title><rect x="61.6294%" y="517" width="37.9353%" height="15" fill="rgb(214,194,35)" fg:x="991" fg:w="610"/><text x="61.8794%" y="527.50">&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt</text></g><g><title>std::io::stdio::Stdout::lock (5 samples, 0.31%)</title><rect x="99.2537%" y="501" width="0.3109%" height="15" fill="rgb(249,28,3)" fg:x="1596" fg:w="5"/><text x="99.5037%" y="511.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (5 samples, 0.31%)</title><rect x="99.2537%" y="485" width="0.3109%" height="15" fill="rgb(222,56,52)" fg:x="1596" fg:w="5"/><text x="99.5037%" y="495.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (5 samples, 0.31%)</title><rect x="99.2537%" y="469" width="0.3109%" height="15" fill="rgb(245,217,50)" fg:x="1596" fg:w="5"/><text x="99.5037%" y="479.50"></text></g><g><title>__GI___pthread_mutex_lock (5 samples, 0.31%)</title><rect x="99.2537%" y="453" width="0.3109%" height="15" fill="rgb(213,201,24)" fg:x="1596" fg:w="5"/><text x="99.5037%" y="463.50"></text></g><g><title>[unknown] (4 samples, 0.25%)</title><rect x="99.5647%" y="757" width="0.2488%" height="15" fill="rgb(248,116,28)" fg:x="1601" fg:w="4"/><text x="99.8147%" y="767.50"></text></g><g><title>[unknown] (4 samples, 0.25%)</title><rect x="99.5647%" y="741" width="0.2488%" height="15" fill="rgb(219,72,43)" fg:x="1601" fg:w="4"/><text x="99.8147%" y="751.50"></text></g><g><title>[unknown] (4 samples, 0.25%)</title><rect x="99.5647%" y="725" width="0.2488%" height="15" fill="rgb(209,138,14)" fg:x="1601" fg:w="4"/><text x="99.8147%" y="735.50"></text></g><g><title>[unknown] (3 samples, 0.19%)</title><rect x="99.6269%" y="709" width="0.1866%" height="15" fill="rgb(222,18,33)" fg:x="1602" fg:w="3"/><text x="99.8769%" y="719.50"></text></g><g><title>[unknown] (3 samples, 0.19%)</title><rect x="99.6269%" y="693" width="0.1866%" height="15" fill="rgb(213,199,7)" fg:x="1602" fg:w="3"/><text x="99.8769%" y="703.50"></text></g><g><title>[unknown] (3 samples, 0.19%)</title><rect x="99.6269%" y="677" width="0.1866%" height="15" fill="rgb(250,110,10)" fg:x="1602" fg:w="3"/><text x="99.8769%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.12%)</title><rect x="99.6891%" y="661" width="0.1244%" height="15" fill="rgb(248,123,6)" fg:x="1603" fg:w="2"/><text x="99.9391%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="99.7512%" y="645" width="0.0622%" height="15" fill="rgb(206,91,31)" fg:x="1604" fg:w="1"/><text x="100.0012%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="99.7512%" y="629" width="0.0622%" height="15" fill="rgb(211,154,13)" fg:x="1604" fg:w="1"/><text x="100.0012%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="99.7512%" y="613" width="0.0622%" height="15" fill="rgb(225,148,7)" fg:x="1604" fg:w="1"/><text x="100.0012%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="99.7512%" y="597" width="0.0622%" height="15" fill="rgb(220,160,43)" fg:x="1604" fg:w="1"/><text x="100.0012%" y="607.50"></text></g><g><title>__rtld_malloc_init_stubs (1 samples, 0.06%)</title><rect x="99.8134%" y="757" width="0.0622%" height="15" fill="rgb(213,52,39)" fg:x="1605" fg:w="1"/><text x="100.0634%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="99.8134%" y="741" width="0.0622%" height="15" fill="rgb(243,137,7)" fg:x="1605" fg:w="1"/><text x="100.0634%" y="751.50"></text></g><g><title>_dl_new_object (1 samples, 0.06%)</title><rect x="99.8756%" y="725" width="0.0622%" height="15" fill="rgb(230,79,13)" fg:x="1606" fg:w="1"/><text x="100.1256%" y="735.50"></text></g><g><title>all (1,608 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(247,105,23)" fg:x="0" fg:w="1608"/><text x="0.2500%" y="831.50"></text></g><g><title>hexi (1,608 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(223,179,41)" fg:x="0" fg:w="1608"/><text x="0.2500%" y="815.50">hexi</text></g><g><title>_start (1,607 samples, 99.94%)</title><rect x="0.0622%" y="789" width="99.9378%" height="15" fill="rgb(218,9,34)" fg:x="1" fg:w="1607"/><text x="0.3122%" y="799.50">_start</text></g><g><title>_dl_start (7 samples, 0.44%)</title><rect x="99.5647%" y="773" width="0.4353%" height="15" fill="rgb(222,106,8)" fg:x="1601" fg:w="7"/><text x="99.8147%" y="783.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.12%)</title><rect x="99.8756%" y="757" width="0.1244%" height="15" fill="rgb(211,220,0)" fg:x="1606" fg:w="2"/><text x="100.1256%" y="767.50"></text></g><g><title>dl_main (2 samples, 0.12%)</title><rect x="99.8756%" y="741" width="0.1244%" height="15" fill="rgb(229,52,16)" fg:x="1606" fg:w="2"/><text x="100.1256%" y="751.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.06%)</title><rect x="99.9378%" y="725" width="0.0622%" height="15" fill="rgb(212,155,18)" fg:x="1607" fg:w="1"/><text x="100.1878%" y="735.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.06%)</title><rect x="99.9378%" y="709" width="0.0622%" height="15" fill="rgb(242,21,14)" fg:x="1607" fg:w="1"/><text x="100.1878%" y="719.50"></text></g><g><title>do_lookup_x (1 samples, 0.06%)</title><rect x="99.9378%" y="693" width="0.0622%" height="15" fill="rgb(222,19,48)" fg:x="1607" fg:w="1"/><text x="100.1878%" y="703.50"></text></g><g><title>check_match (1 samples, 0.06%)</title><rect x="99.9378%" y="677" width="0.0622%" height="15" fill="rgb(232,45,27)" fg:x="1607" fg:w="1"/><text x="100.1878%" y="687.50"></text></g><g><title>strcmp (1 samples, 0.06%)</title><rect x="99.9378%" y="661" width="0.0622%" height="15" fill="rgb(249,103,42)" fg:x="1607" fg:w="1"/><text x="100.1878%" y="671.50"></text></g></svg></svg>